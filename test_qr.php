<?php
// Script de diagn√≥stico para c√≥digos QR
error_reporting(E_ALL);
ini_set('display_errors', 1);

require_once 'config/cn.php';
require_once 'clases/Producto.php';
require_once 'clases/QRCodeGenerator.php';

echo "<h2>üîç Diagn√≥stico del Sistema de C√≥digos QR</h2>";

// Test 1: Verificar configuraci√≥n de PHP
echo "<h3>1. Configuraci√≥n de PHP:</h3>";
echo "‚úÖ allow_url_fopen: " . (ini_get('allow_url_fopen') ? 'Habilitado' : '‚ùå DESHABILITADO') . "<br>";
echo "‚úÖ file_get_contents disponible: " . (function_exists('file_get_contents') ? 'S√≠' : '‚ùå No') . "<br>";
echo "‚úÖ curl disponible: " . (function_exists('curl_init') ? 'S√≠' : 'No') . "<br>";

// Test 2: Verificar directorio
echo "<h3>2. Directorio assets/qr/:</h3>";
$qrDir = 'assets/qr/';
if (!file_exists($qrDir)) {
    if (mkdir($qrDir, 0777, true)) {
        echo "‚úÖ Directorio creado: $qrDir<br>";
    } else {
        echo "‚ùå Error al crear directorio: $qrDir<br>";
    }
} else {
    echo "‚úÖ Directorio existe: $qrDir<br>";
}

echo "‚úÖ Permisos de escritura: " . (is_writable($qrDir) ? 'S√≠' : '‚ùå No') . "<br>";

// Test 3: Crear producto de prueba
echo "<h3>3. Producto de Prueba:</h3>";
$producto = new Producto(999, 'Producto de Prueba', 99.99, 1);
echo "‚úÖ Producto creado: ID={$producto->getIdProducto()}, Nombre={$producto->getNombre()}<br>";

// Test 4: Generar URL del QR
echo "<h3>4. Generaci√≥n de URL del QR:</h3>";
try {
    $qrUrl = QRCodeGenerator::generateProductQR($producto);
    echo "‚úÖ URL generada: <a href='$qrUrl' target='_blank'>$qrUrl</a><br>";
    echo "‚úÖ Datos del QR: " . QRCodeGenerator::generateProductData($producto) . "<br>";
} catch (Exception $e) {
    echo "‚ùå Error al generar URL: " . $e->getMessage() . "<br>";
}

// Test 5: Descargar imagen de prueba
echo "<h3>5. Descarga de Imagen:</h3>";
try {
    if (isset($qrUrl)) {
        echo "üîÑ Intentando descargar imagen...<br>";
        
        $context = stream_context_create([
            'http' => [
                'timeout' => 30,
                'user_agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            ],
            'ssl' => [
                'verify_peer' => false,
                'verify_peer_name' => false
            ]
        ]);
        
        $imageData = file_get_contents($qrUrl, false, $context);
        
        if ($imageData !== false && !empty($imageData)) {
            echo "‚úÖ Imagen descargada correctamente. Tama√±o: " . strlen($imageData) . " bytes<br>";
            
            $testFile = $qrDir . 'test_qr.png';
            if (file_put_contents($testFile, $imageData)) {
                echo "‚úÖ Imagen guardada en: $testFile<br>";
                echo "‚úÖ Vista previa: <img src='$testFile' style='width:100px;height:100px;'><br>";
            } else {
                echo "‚ùå Error al guardar imagen<br>";
            }
        } else {
            echo "‚ùå No se pudo descargar la imagen<br>";
        }
    }
} catch (Exception $e) {
    echo "‚ùå Error en descarga: " . $e->getMessage() . "<br>";
}

// Test 6: M√©todo completo
echo "<h3>6. M√©todo Completo:</h3>";
try {
    $resultado = QRCodeGenerator::generateAndSaveProductQR($producto);
    if ($resultado) {
        echo "‚úÖ QR generado exitosamente: $resultado<br>";
        if (file_exists($resultado)) {
            if (strpos($resultado, 'http') === 0) {
                echo "‚ÑπÔ∏è Usando URL directa (no archivo local)<br>";
                echo "‚úÖ Vista previa: <img src='$resultado' style='width:100px;height:100px;'><br>";
            } else {
                echo "‚úÖ Archivo local creado<br>";
                echo "‚úÖ Vista previa: <img src='$resultado' style='width:100px;height:100px;'><br>";
            }
        }
    } else {
        echo "‚ùå Error al generar QR<br>";
    }
} catch (Exception $e) {
    echo "‚ùå Error en m√©todo completo: " . $e->getMessage() . "<br>";
}

// Test 7: Conexi√≥n a Google Chart API
echo "<h3>7. Test de Conectividad:</h3>";
$testUrl = 'https://chart.googleapis.com/chart?chs=100x100&cht=qr&chl=test';
echo "üîÑ Probando conexi√≥n a Google Chart API...<br>";

$headers = @get_headers($testUrl);
if ($headers && strpos($headers[0], '200') !== false) {
    echo "‚úÖ Conexi√≥n a Google Chart API exitosa<br>";
    echo "‚úÖ Test QR: <img src='$testUrl' style='width:50px;height:50px;'><br>";
} else {
    echo "‚ùå No se puede conectar a Google Chart API<br>";
    echo "üîß Intenta con CURL...<br>";
    
    if (function_exists('curl_init')) {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $testUrl);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        
        $result = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        if ($httpCode == 200) {
            echo "‚úÖ CURL funciona correctamente<br>";
        } else {
            echo "‚ùå CURL tambi√©n falla. C√≥digo: $httpCode<br>";
        }
    }
}

echo "<h3>üìã Resumen:</h3>";
echo "<p><strong>Si ves errores arriba, revisa:</strong></p>";
echo "<ul>";
echo "<li>Que allow_url_fopen est√© habilitado en PHP</li>";
echo "<li>Que tengas conexi√≥n a internet</li>";
echo "<li>Que el directorio assets/qr/ tenga permisos de escritura</li>";
echo "<li>Que no haya firewall bloqueando Google Chart API</li>";
echo "</ul>";

echo "<p><a href='?c=producto&a=index' class='btn btn-primary'>üîô Volver a Productos</a></p>";
?>